use anyhow::{Context, Result};
use serde::Deserialize;
use std::collections::BTreeMap;
use std::fs;
use std::path::PathBuf;

#[derive(Deserialize, Default)]
struct Tokens {
    #[serde(default)]
    colors: BTreeMap<String, String>,
    #[serde(default)]
    radii: BTreeMap<String, f64>,
    #[serde(default)]
    space: BTreeMap<String, f64>,
    #[serde(default)]
    fonts: BTreeMap<String, String>,
    #[serde(default)]
    durations: BTreeMap<String, f64>,
}

pub fn run() -> Result<()> {
    let manifest_dir = std::env::var("CARGO_MANIFEST_DIR")?;
    // tokens.json is located at /tokens/tokens.json
    let tokens_path = PathBuf::from(&manifest_dir).join("tokens.json");
    let data = fs::read_to_string(&tokens_path)
        .with_context(|| format!("reading {}", tokens_path.display()))?;
    let tokens: Tokens = serde_json::from_str(&data).context("parsing tokens.json")?;

    // Build :root CSS variables
    let mut css = String::new();
    css.push_str(":root{\n");
    for (k, v) in &tokens.colors {
        css.push_str(&format!("  --t-color-{}: {};\n", k, v));
    }
    for (k, v) in &tokens.radii {
        css.push_str(&format!("  --t-radius-{}: {}px;\n", k, round(*v)));
    }
    for (k, v) in &tokens.space {
        css.push_str(&format!("  --t-space-{}: {}px;\n", k, round(*v)));
    }
    for (k, v) in &tokens.fonts {
        css.push_str(&format!("  --t-font-{}: {};\n", k, v));
    }
    for (k, v) in &tokens.durations {
        css.push_str(&format!("  --t-dur-{}: {}ms;\n", k, round(*v)));
    }
    css.push_str("}\n");

    // Write generated files; create parent dirs as needed
    write_file(path_from_repo_root(&manifest_dir, "apps/web/src/tokens.css"), &format!("/* generated by tokens-gen */\n{}", css))?;
    write_file(path_from_repo_root(&manifest_dir, "apps/mobile/lynx.tokens.css"), &format!("/* generated by tokens-gen */\n{}", css))?;

    // Tailwind/daisyUI theme config that references CSS vars
    let mut cjs = String::from("/* generated by tokens-gen */\nmodule.exports = {\n  theme: { extend: {\n    colors: {\n");
    for (k, _v) in &tokens.colors {
        cjs.push_str(&format!("      {}: 'var(--t-color-{})',\n", k, k));
    }
    cjs.push_str("    },\n  } },\n  daisyui: { themes: [ { app: {\n");
    // map key daisyUI slots to CSS vars (extend later as needed)
    cjs.push_str("      primary: 'var(--t-color-brand)',\n");
    cjs.push_str("      'base-100': 'var(--t-color-bg)',\n");
    cjs.push_str("      'base-content': 'var(--t-color-fg)'\n");
    cjs.push_str("  } } ] }\n};\n");
    write_file(path_from_repo_root(&manifest_dir, "apps/web/tailwind.tokens.cjs"), &cjs)?;

    // Optional Rust constants for mobile consumption
    let mut rs = String::from("// generated from tokens.json\npub struct Tokens {\n");
    for (k, _v) in &tokens.colors { rs.push_str(&format!("    pub color_{}: &'static str,\n", k)); }
    for (k, _v) in &tokens.radii { rs.push_str(&format!("    pub radius_{}: f32,\n", k)); }
    for (k, _v) in &tokens.space { rs.push_str(&format!("    pub space_{}: f32,\n", k)); }
    for (k, _v) in &tokens.durations { rs.push_str(&format!("    pub dur_{}: u32,\n", k)); }
    for (k, _v) in &tokens.fonts { rs.push_str(&format!("    pub font_{}: &'static str,\n", k)); }
    rs.push_str("}\n\npub const TOKENS: Tokens = Tokens {\n");
    for (k, v) in &tokens.colors { rs.push_str(&format!("    color_{}: \"{}\",\n", k, v)); }
    for (k, v) in &tokens.radii { rs.push_str(&format!("    radius_{}: {}f32,\n", k, round(*v))); }
    for (k, v) in &tokens.space { rs.push_str(&format!("    space_{}: {}f32,\n", k, round(*v))); }
    for (k, v) in &tokens.durations { rs.push_str(&format!("    dur_{}: {}u32,\n", k, v.round() as u32)); }
    for (k, v) in &tokens.fonts { rs.push_str(&format!("    font_{}: \"{}\",\n", k, v.replace('\"', "\\\""))); }
    rs.push_str("};\n");
    write_file(path_from_repo_root(&manifest_dir, "apps/mobile/src/tokens.rs"), &rs)?;

    println!(
        "Wrote tokens to:\n - {}\n - {}\n - {}\n - {}",
        path_from_repo_root(&manifest_dir, "apps/web/tailwind.tokens.cjs").display(),
        path_from_repo_root(&manifest_dir, "apps/web/src/tokens.css").display(),
        path_from_repo_root(&manifest_dir, "apps/mobile/lynx.tokens.css").display(),
        path_from_repo_root(&manifest_dir, "apps/mobile/src/tokens.rs").display()
    );

    Ok(())
}

fn path_from_repo_root(manifest_dir: &str, rel: &str) -> PathBuf {
    // Repo root is parent of /tokens
    PathBuf::from(manifest_dir).parent().unwrap().join(rel)
}

fn write_file(p: PathBuf, content: &str) -> Result<()> {
    if let Some(parent) = p.parent() { std::fs::create_dir_all(parent)?; }
    std::fs::write(&p, content)?;
    Ok(())
}

fn round(x: f64) -> String {
    if (x.fract() - 0.0).abs() < f64::EPSILON { format!("{:.0}", x) } else { format!("{:.2}", x) }
}

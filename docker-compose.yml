services:
  # --- Vite web (dev) ---
  web:
    image: oven/bun:1
    working_dir: /workspace
    command: >
      sh -lc "\
      HASH=\$(bun -e \"import { createHash } from 'crypto'; import { readFileSync } from 'fs'; try{process.stdout.write(createHash('sha256').update(readFileSync('bun.lock')).digest('hex'))}catch{}\"); \
      HASHFILE=node_modules/.bun.lock.hash; \
      if [ ! -d node_modules ] || [ -z \"\$(ls -A node_modules 2>/dev/null)\" ] || [ ! -f \"$$HASHFILE\" ] || [ \"$$HASH\" != \"\$(cat \"$$HASHFILE\" 2>/dev/null)\" ]; then \
        echo '[web] installing deps (first run or bun.lock changed)'; \
        bun install --ignore-scripts && printf \"%s\" \"$$HASH\" > \"$$HASHFILE\"; \
      else \
        echo '[web] deps cached; bun.lock unchanged'; \
      fi; \
      bunx tsc -p packages/shared/tsconfig.build.json || true; \
      exec bun scripts/dev-env.js"
    environment:
      CHOKIDAR_USEPOLLING: "1"
      CHOKIDAR_INTERVAL: "100"
      # Disable HTTPS inside Vite; Traefik terminates TLS
      NO_HTTPS: "1"
      # Hint for vite.config to enable WSS HMR via Traefik
      DOCKER_TRAEFIK: "1"
      # Let Auth.js trust the incoming Host header and derive URLs dynamically
      AUTH_TRUST_HOST: "true"
      # Ensure mkcert includes your LAN IP in the certificate SANs
      # PUBLIC_IP comes from .env; default to 127.0.0.1 to avoid warnings
      MKCERT_HOSTS: "localhost,127.0.0.1,::1,${PUBLIC_IP:-127.0.0.1}"
      LAN_DEV_URL: "https://${PUBLIC_IP:-127.0.0.1}:5173"
      # Option: run Vite in CSR mode if SSR dev renders 404
      NO_SSR: "1"
    volumes:
      - ./:/workspace
      # Persist Bun cache and node_modules across container recreations
      - bun_cache:/root/.bun
      - root_node_modules:/workspace/node_modules
      - web_node_modules:/workspace/apps/web/node_modules
    ports:
      - "5175:5174"
    labels:
      - "traefik.enable=true"
      # Match all hosts; route everything at '/'
      - "traefik.http.routers.web.rule=PathPrefix(`/`)"
      - "traefik.http.routers.web.entrypoints=websecure"
      - "traefik.http.routers.web.tls=true"
      # Add explicit Alt-Svc header advertising HTTP/3
      - "traefik.http.routers.web.middlewares=web-headers@docker,compress@file"
      - "traefik.http.middlewares.web-headers.headers.customResponseHeaders.Alt-Svc=h3=\":5173\"; ma=86400"
      # Enforce HSTS over HTTPS responses (in addition to app headers)
      - "traefik.http.middlewares.web-headers.headers.stsSeconds=63072000"
      - "traefik.http.middlewares.web-headers.headers.stsIncludeSubdomains=true"
      - "traefik.http.middlewares.web-headers.headers.stsPreload=true"
      - "traefik.http.middlewares.web-headers.headers.forceSTSHeader=true"
      # Ensure generic '/' route has lower priority than '/lynx'
      - "traefik.http.routers.web.priority=10"
      - "traefik.http.services.web.loadbalancer.server.port=5174"
    healthcheck:
      test: ["CMD-SHELL", "bun -e \"try{const r=await fetch('http://127.0.0.1:5174/');process.exit(r.status<500?0:1)}catch(e){process.exit(1)}\" "]
      interval: 5s
      timeout: 3s
      retries: 60
      start_period: 60s
    depends_on: []

  # --- LynxJS app (dev) ---
  lynx:
    image: oven/bun:1
    working_dir: /workspace
    profiles: ["lynx"]
    # Prefer docker-specific dev script if present; fallback to default
    command: >
      sh -lc "bun install && exec bun -C apps/lynx run dev:docker"
    environment:
      CHOKIDAR_USEPOLLING: "1"
      CHOKIDAR_INTERVAL: "100"
      # Suggest to bind and choose port if rspeedy honors env
      HOST: "0.0.0.0"
      PORT: "3000"
      # disable TS type-check plugin in dev to avoid strict errors blocking HMR
      LYNX_TYPECHECK: "0"
    volumes:
      - ./:/workspace
      - root_node_modules:/workspace/node_modules
      - lynx_node_modules:/workspace/apps/lynx/node_modules
    tty: true
    stdin_open: true
    labels:
      - "traefik.enable=true"
      # expose at /lynx (adjust if you prefer a subdomain)
      - "traefik.http.routers.lynx.rule=PathPrefix(`/lynx`)"
      # Redirect base /lynx to the dev bundle and advertise HTTP/3 via Alt-Svc
      - "traefik.http.routers.lynx.middlewares=lynx-redirect@docker,lynx-headers@docker"
      - "traefik.http.middlewares.lynx-redirect.redirectregex.regex=^/lynx/?$"
      - "traefik.http.middlewares.lynx-redirect.redirectregex.replacement=/lynx/main.lynx.bundle?fullscreen=true"
      - "traefik.http.middlewares.lynx-redirect.redirectregex.permanent=false"
      - "traefik.http.middlewares.lynx-headers.headers.customResponseHeaders.Alt-Svc=h3=\":5173\"; ma=86400"
      - "traefik.http.middlewares.lynx-headers.headers.stsSeconds=63072000"
      - "traefik.http.middlewares.lynx-headers.headers.stsIncludeSubdomains=true"
      - "traefik.http.middlewares.lynx-headers.headers.stsPreload=true"
      - "traefik.http.middlewares.lynx-headers.headers.forceSTSHeader=true"
      - "traefik.http.routers.lynx.entrypoints=websecure"
      - "traefik.http.routers.lynx.tls=true"
      - "traefik.http.routers.lynx.priority=100"
      - "traefik.http.services.lynx.loadbalancer.server.port=3000"
    healthcheck:
      test: ["CMD-SHELL", "bun -e \"try{const r=await fetch('http://127.0.0.1:3000/');process.exit(r.status<500?0:1)}catch(e){process.exit(1)}\" "]
      interval: 5s
      timeout: 3s
      retries: 60
      start_period: 60s

  # --- Rust Gateway (dev API) ---
  gateway:
    # Dev image with build deps preinstalled
    build:
      context: .
      dockerfile: docker/gateway.dev.Dockerfile
    image: stack-gateway-dev
    working_dir: /workspace
    # Command provided by the dev image; keep here for clarity
    command: >
      /bin/bash -lc "/usr/local/cargo/bin/cargo --version \
      && /usr/local/cargo/bin/cargo run --manifest-path apps/gateway/Cargo.toml"
    environment:
      # Quieter logs by default; override by setting RUST_LOG in your shell
      RUST_LOG: ${RUST_LOG:-warn,tower_http=info}
      # Allow the dev site origins over HTTPS on 5173
      CORS_ALLOW_ORIGINS: "https://localhost:5173,https://127.0.0.1:5173"
      # Also allow any IP-based origin on port 5173 (LAN/public IPs)
      CORS_ALLOW_ANY_IP_PORTS: "5173"
      # Bind on container network
      GATEWAY_ADDR: 0.0.0.0:7000
      # Persist target dir for fast incremental builds
      CARGO_TARGET_DIR: /workspace/target
      RUSTC_WRAPPER: /usr/bin/sccache
    volumes:
      - ./:/workspace
      - cargo_registry:/usr/local/cargo/registry
      - cargo_git:/usr/local/cargo/git
      - cargo_target:/workspace/target
    healthcheck:
      test: ["CMD-SHELL", "/bin/bash -lc 'exec 3<>/dev/tcp/127.0.0.1/7000 && echo -e \"GET /healthz HTTP/1.0\\r\\n\\r\\n\" >&3 && grep -q ok <&3' "]
      interval: 5s
      timeout: 3s
      retries: 60
      start_period: 60s
    labels:
      - "traefik.enable=true"
      # Route API requests to the Rust gateway
      - "traefik.http.routers.gateway.rule=PathPrefix(`/api`)"
      - "traefik.http.routers.gateway.entrypoints=websecure"
      - "traefik.http.routers.gateway.tls=true"
      # Ensure API route wins over generic web route
      - "traefik.http.routers.gateway.priority=200"
      - "traefik.http.routers.gateway.middlewares=compress@file"
      - "traefik.http.services.gateway.loadbalancer.server.port=7000"

  # --- Tauri build (Linux target) ---
  tauri-build:
    image: rust:1.79-bullseye
    working_dir: /workspace
    entrypoint: ["/bin/bash","-lc"]
    command: >
      set -euo pipefail
      && apt-get update \
      && apt-get install -y curl wget libgtk-3-dev libayatana-appindicator3-dev librsvg2-dev pkg-config build-essential libssl-dev \
      && curl -fsSL https://deb.nodesource.com/setup_20.x | bash - \
      && apt-get install -y nodejs \
      && npm i -g pnpm \
      && cargo install tauri-cli || true \
      && cd apps/desktop \
      && pnpm i || npm i || true \
      && tauri build \
      && mkdir -p /workspace/dist/tauri \
      && cp -r target/release/bundle /workspace/dist/tauri/
    volumes:
      - ./:/workspace
    profiles: ["build"]
    restart: "no"

  # --- Traefik gateway (HTTP/3) ---
  traefik:
    image: traefik:v3.5.1
    command:
      - "--entrypoints.websecure.address=:5173"
      - "--entrypoints.websecure.http3=true"
      - "--log.level=INFO"
      - "--api.dashboard=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.file.filename=/etc/traefik/dynamic.yml"
    ports:
      - "5173:5173/tcp"
      - "5173:5173/udp"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./apps/web/certs:/certs:ro
      - ./traefik/dynamic.yml:/etc/traefik/dynamic.yml:ro
    depends_on:
      web:
        condition: service_healthy
      gateway:
        condition: service_healthy
    labels:
      - "traefik.enable=true"
      # Prefer hosting dashboard on a subdomain to avoid /api conflicts
      - "traefik.http.routers.traefik-host.rule=HostRegexp(`traefik\\..+`)"
      - "traefik.http.routers.traefik-host.entrypoints=websecure"
      - "traefik.http.routers.traefik-host.tls=true"
      - "traefik.http.routers.traefik-host.service=api@internal"

volumes:
  bun_cache:
  root_node_modules:
  web_node_modules:
  lynx_node_modules:
  cargo_registry:
  cargo_git:
  cargo_target:

#!/usr/bin/env node
import os from 'node:os';
import fs from 'node:fs';
import path from 'node:path';

function pickLanIPv4() {
  const ifs = os.networkInterfaces();
  const all = [];
  for (const [name, addrs] of Object.entries(ifs)) {
    for (const a of addrs || []) {
      if (a.family === 'IPv4' && !a.internal) {
        const lname = String(name).toLowerCase();
        if (lname.includes('docker') || lname.includes('vbox') || lname.includes('loopback') || lname.includes('utun') || lname.includes('hamachi')) {
          continue;
        }
        all.push({ name, address: a.address });
      }
    }
  }
  return all[0]?.address || null;
}

const argIP = process.argv.find((a) => /^\d+\.\d+\.\d+\.\d+$/.test(a));
const ip = argIP || process.env.PUBLIC_IP || pickLanIPv4();
if (!ip) {
  console.error('[mkcert] Could not detect a LAN IPv4 address. Pass one explicitly: node scripts/regen-mkcert-hosts.mjs 192.168.x.y');
  process.exit(1);
}
const hosts = ['localhost', '127.0.0.1', '::1', ip];
const certDir = path.resolve('apps/web/certs');
const hostsFile = path.join(certDir, '.hosts');
fs.mkdirSync(certDir, { recursive: true });
fs.writeFileSync(hostsFile, hosts.join(','));
for (const f of ['dev.crt', 'dev.key']) {
  const p = path.join(certDir, f);
  try { if (fs.existsSync(p)) fs.rmSync(p); } catch {}
}
// Also update root .env for compose variable substitution
const envPath = path.resolve('.env');
let prev = '';
try { prev = fs.readFileSync(envPath, 'utf8'); } catch {}
const lines = prev.split(/\r?\n/).filter(Boolean).filter((l) => !/^PUBLIC_IP\s*=/.test(l) && !/^HMR_HOST\s*=/.test(l));
lines.push(`PUBLIC_IP=${ip}`);
lines.push(`HMR_HOST=${ip}`);
fs.writeFileSync(envPath, `# Auto-generated by scripts/regen-mkcert-hosts.mjs\n${lines.join('\n')}\n`);

console.log(`[mkcert] Set hosts: ${hosts.join(',')}`);
console.log(`[mkcert] Wrote ${hostsFile} and removed existing cert files to force regeneration.`);
console.log(`[mkcert] Updated .env with PUBLIC_IP=${ip}.`);
console.log('Next: docker compose up -d web traefik (cert will regenerate on start).');

